==============================================================================
------------------------------------------------------------------------------
                                                                 *OrgApi.load()*
                             `OrgApi.load`({name})
Parameters~
{name} `(optional)` `(string|string[])` specific file names to return (absolute path). If ommitted, returns all loaded files
Return~
OrgFile|OrgFile[]

------------------------------------------------------------------------------
                                                              *OrgApi.current()*
                               `OrgApi.current`()
Get current org buffer file
Return~
OrgFile


==============================================================================
------------------------------------------------------------------------------
                                                                       *OrgFile*
                                   `OrgFile`
Class~
{OrgFile}
Fields~
{category} `(string)` current file category name. By default only filename without extension unless defined via #+CATEGORY directive
{filename} `(string)` absolute path of the current file
{headlines} OrgHeadline[]
{is_archive_file} `(boolean)`

------------------------------------------------------------------------------
                                                              *OrgFile:reload()*
                               `OrgFile:reload`()
Return refreshed instance of the file
Return~
OrgFile


==============================================================================
------------------------------------------------------------------------------
                                                                   *OrgHeadline*
                                 `OrgHeadline`
Class~
{OrgHeadline}
Fields~
{title} `(string)` headline title without todo keyword, tags and priority. Ex. `* TODO I am a headline  :SOMETAG:` returns `I am a headline`
{line} `(string)` full headline line
{todo_value} `(optional)` `(string)` todo keyword of the headline (Example: TODO, DONE)
{todo_type} `(optional)` `(string)` | "'TODO'" | "'DONE'" | "''"
{tags} `(string[])` List of own tags
{deadline} `(Date|nil)`
{scheduled} `(Date|nil)`
{closed} `(Date|nil)`
{dates} Date[] List of all dates that are not "plan" dates
{position} Range
{all_tags} `(string[])` List of all tags (own + inherited)
{file} OrgFile
{parent} `(OrgHeadline|nil)`
{priority} `(string|nil)`
{headlines} OrgHeadline[]

------------------------------------------------------------------------------
                                                          *OrgHeadline:reload()*
                             `OrgHeadline:reload`()
Return updated version of headline
Return~
OrgHeadline

------------------------------------------------------------------------------
                                                        *OrgHeadline:set_tags()*
                         `OrgHeadline:set_tags`({tags})
Set tags on the headline. This replaces all current tags with provided ones
Parameters~
{tags} `(string[])`
Return~
Promise

------------------------------------------------------------------------------
                                                     *OrgHeadline:priority_up()*
                          `OrgHeadline:priority_up`()
Increase priority on a headline
Return~
Promise

------------------------------------------------------------------------------
                                                   *OrgHeadline:priority_down()*
                         `OrgHeadline:priority_down`()
Decrease priority on a headline
Return~
Promise

------------------------------------------------------------------------------
                                                    *OrgHeadline:set_priority()*
                     `OrgHeadline:set_priority`({priority})
Set specific priority on a headline. Empty string clears the priority
Parameters~
{priority} `(string)`
Return~
Promise

------------------------------------------------------------------------------
                                                    *OrgHeadline:set_deadline()*
                       `OrgHeadline:set_deadline`({date})
Set deadline date
Parameters~
{date} `(optional)` `(Date|string|nil)` If ommited, opens the datepicker. Empty string removes the date. String must follow org date convention (YYYY-MM-DD HH:mm...)
Return~
Promise

------------------------------------------------------------------------------
                                                   *OrgHeadline:set_scheduled()*
                      `OrgHeadline:set_scheduled`({date})
Set scheduled date
Parameters~
{date} `(optional)` `(Date|string|nil)` If ommited, opens the datepicker. Empty string removes the date. String must follow org date convention (YYYY-MM-DD HH:mm...)
Return~
Promise


==============================================================================
------------------------------------------------------------------------------
                                                                     *OrgAgenda*
                                  `OrgAgenda`
Class~
{OrgAgenda}

------------------------------------------------------------------------------
Class~
{OrgAgendaOptions}
Fields~
{filters} `(optional)` `(string)` see Filters to apply to the current view. See `:help orgmode-org_agenda_filter` for more information
{from} `(optional)` `(string)` | Date
{span} `(optional)` `(number)` | 'day' | 'week' | 'month' | 'year'

------------------------------------------------------------------------------
                                                            *OrgAgenda.agenda()*
                         `OrgAgenda.agenda`({options})
Parameters~
{options} `(optional)` OrgAgendaOptions

------------------------------------------------------------------------------
Class~
{OrgAgendaTodosOptions}
Fields~
{filters} `(optional)` `(string)` see Filters to apply to the current view. See `:help orgmode-org_agenda_filter` for more information

------------------------------------------------------------------------------
                                                             *OrgAgenda.todos()*
                          `OrgAgenda.todos`({options})
Parameters~
{options} `(optional)` OrgAgendaTodosOptions

------------------------------------------------------------------------------
Class~
{OrgAgendaTagsOptions}
Fields~
{filters} `(optional)` `(string)` see Filters to apply to the current view. See `:help orgmode-org_agenda_filter` for more information
{todo_only} `(optional)` `(boolean)`

------------------------------------------------------------------------------
                                                              *OrgAgenda.tags()*
                          `OrgAgenda.tags`({options})
Parameters~
{options} `(optional)` OrgAgendaTagsOptions


==============================================================================
------------------------------------------------------------------------------
                                                                   *OrgPosition*
                                 `OrgPosition`
Class~
{OrgPosition}
Fields~
{start_line} `(number)` start line number
{end_line} `(number)` end line number
{start_col} `(number)` start column number
{end_col} `(number)` end column number


 vim:tw=78:ts=8:noet:ft=help:norl: